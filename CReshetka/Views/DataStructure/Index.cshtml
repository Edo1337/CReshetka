@{
    ViewData["Title"] = "Структуры данных";
}
<h1>@ViewData["Title"]</h1>

<div>
    <p>
        Структуры данных представляют собой способы организации и хранения информации в компьютере. Эффективный выбор структуры данных может значительно повысить производительность программы и сделать код более читаемым и управляемым.

        Структуры данных используются так или иначе в каждом проекте. Они позволяют упорядочивать, искать, анализировать и использовать данные с применением алгоритмов программирования. Для каждой структуры данных — свои алгоритмы.
    </p>
    <p>
        В C# для хранения набора однотипных данных можно использовать массивы. Но с ними не всегда удобно работать потому, что они имеют фиксированный размер и часто бывает сложно угадать, какого размера нужен массив.
    </p>
    <p>
        Для решения этих задач в C# есть коллекции. Они позволяют динамически изменять свой размер. Также они удобны тем что некоторые из них представляют из себя готовые реализации стандартных структур данных, таких как список, хеш таблица, стек, очередь.
    </p>
    <p>
        Все коллекции лежат в нескольких пространствах имен:
    </p>
    <p>
        System.Collections — простые необобщенные коллекции.
    </p>
    <p>
        System.Collections.Generic — обобщенные коллекции.
    </p>
    <p>
        System.Collections.Specialized — специальные коллекции.
    </p>
    <p>
        System.Collections.Concurrent — коллекции для работы в многопоточной среде.
    </p>
    <p>
        <h3><span>Алгоритмическая сложность</span></h3>

        <table>
            <thead>
                <tr>
                    <th>Коллекция</th>
                    <th>Добавление/удаление элемента в середине</th>
                    <th>Получение элемента по индексу</th>
                    <th>Проверка наличия элемента</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Array</td>
                    <td>O(n)</td>
                    <td>O(1)</td>
                    <td>O(n)</td>
                </tr>
                <tr>
                    <td>List</td>
                    <td>O(n)</td>
                    <td>O(1)</td>
                    <td>O(n)</td>
                </tr>
                <tr>
                    <td>LinkedList</td>
                    <td>O(1)</td>
                    <td>O(n)</td>
                    <td>O(n)</td>
                </tr>
                <tr>
                    <td>Queue</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                </tr>
                <tr>
                    <td>Stack</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                </tr>
                <tr>
                    <td>Dictionary</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                    <td>O(1)</td>
                </tr>
            </tbody>
        </table>
    </p>
</div>
