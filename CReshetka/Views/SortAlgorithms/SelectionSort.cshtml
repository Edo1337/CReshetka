@{
    ViewData["Title"] = "Сортировка выбором (Selection Sort)";
}
<h1>@ViewData["Title"]</h1>

<div class="container">
    <p>
        Сортировка выбором (Selection Sort) - это простой алгоритм сортировки, который на каждом шаге выбирает наименьший (или наибольший) элемент из неотсортированной части массива и помещает его в начало (или конец) отсортированной части.
    </p>
    <p>
        Основная идея сортировки выбором заключается в разделении массива на две части: отсортированную и неотсортированную. На каждом шаге алгоритма минимальный (или максимальный) элемент из неотсортированной части выбирается и обменивается с первым элементом неотсортированной части. Этот процесс повторяется до тех пор, пока вся последовательность не будет отсортирована.
    </p>
    <p>
        <h3><span>Как работает сортировка выбором</span></h3>
    </p>
    <p>
        <span>На каждом шаге:</span>
    </p>
    <p>
        Из неотсортированной части выбирается минимальный (или максимальный) элемент.
    </p>
    <br />
    <p>
        <span>Обмен:</span>
    </p>
    <p>
        Выбранный элемент обменивается с первым элементом в неотсортированной части.
    </p>
    <br />
    <p>
        <span>Увеличение отсортированной части:</span>
    </p>
    <p>
        Отсортированная часть массива увеличивается, а неотсортированная уменьшается.
    </p>
    <h3><span>Преимущества и недостатки</span></h3>
    <p>
        <span>Преимущества:</span>
    </p>
    <p>
        1. Прост в реализации и понимании.
    </p>
    <p>
        2. Не требует дополнительной памяти, так как сортировка выполняется "на месте".
    </p>
    <br />
    <p>
        <span>Недостатки:</span>
    </p>
    <p>
        1. Низкая производительность для больших массивов из-за временной сложности O(n^2).
    </p>
    <p>
        2. Не является самым эффективным алгоритмом сортировки для больших объемов данных.
    </p>
    <p>
        <h3><span>Пример сортировки выбором на C#:</span></h3>
    </p>
    @* упростить код не забудь!*@
<pre>
<code>
    public class SelectionSort
{
    public static void Main()
    {
        int[] arrayToSort = { 64, 34, 25, 12, 22, 11, 90 };

        Console.WriteLine("Original array: " + string.Join(", ", arrayToSort));

        // Вызываем метод сортировки
        PerformSelectionSort(arrayToSort);

        Console.WriteLine("Sorted array: " + string.Join(", ", arrayToSort));
    }

    public static void PerformSelectionSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            // Находим минимальный элемент в неотсортированной части
            int minIndex = i;
            for (int j = i + 1; j < n; j++)
            {
                if (arr[j] < arr[minIndex])
                {
                    minIndex = j;
                }
            }

            // Обмен минимального элемента с первым элементом неотсортированной части
            int temp = arr[minIndex];
            arr[minIndex] = arr[i];
            arr[i] = temp;
        }
    }
}
</code>
</pre>

    <p>
        <h3><span>Визуализация сортировки:</span></h3>
    </p>

    <div style="align-content:center">
        <iframe width="1280" height="720" src="https://www.youtube.com/embed/92BfuxHn2XE?list=PLZh3kxyHrVp_AcOanN_jpuQbcMVdXbqei" title="Selection Sort" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
    </div>

    <p>
        <h3><span>Объяснение от <a href="https://www.youtube.com/CODEBLOG">CODE BLOG</a>:</span></h3>
    </p>
    <div style="align-content:center">
        <iframe width="1280" height="720" src="https://www.youtube.com/embed/TgltnegYRNs?list=PLIIXgDT0bKw4n6pwBjymd3wCPyQ3_SLMo" title="Сортировка выбором (Selection sort) - Алгоритмы C#" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
    </div>
</div>
